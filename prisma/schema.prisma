// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Skill {
  TRIPLE_LEG_STRENGTH // "常人の三倍の脚力"
  RESILIENT_BODY // "頑強なる肉体"
  LANCE_KICK // "ランスキック"
  CHARM // "魅了"
  NINJA_SOUL_DARKNESS // "ニンジャソウルの闇"
  KILL_NINE // "kill-9"（キルナイン）
}

model Ninja {
  id                             String   @id @default(cuid())
  name                           String
  type                           String
  karate                         Int?
  karate_grow                    Int?
  neuron                         Int?
  neuron_grow                    Int?
  wazamae                        Int?
  wazamae_grow                   Int?
  jitsu                          Int?
  jitsu_grow                     Int?
  initiative                     Int?
  hp_change_value                Int?
  mental_change_value            Int?
  leg_trength_change_value       Int?
  dkk                            Int?
  assets                         Int?
  fame                           Int?
  jitsu_skils                    String[]
  default_skill                  Skill[]
  skills                         String[]
  items                          String[]
  knowledge_skills               String[]
  cybernetics                    String[]
  attack_change_value            Int?
  attack_growth_value            Int?
  shooting_change_value          Int?
  shooting_growth_value          Int?
  pilot_change_value             Int?
  brain_change_value             Int?
  evasion_change_value           Int?
  precision_change_value         Int?
  rollover_change_value          Int?
  activation_change_value        Int?
  quick_response_change_value    Int?
  emergency_evation_change_value Int?
  published                      Boolean  @default(false)
  author                         User?    @relation(fields: [authorId], references: [id])
  authorId                       String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  ninjas        Ninja[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
